# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.

name: Build and Deploy to Kubernetes and Managed Container Services

on:

  # push:
  #   branches: [ "master" ]
  
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cloud-summit    # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: summit-app-dep # TODO: update to deployment name
  REPOSITORY: cloud-summit
  IMAGE: summit-app
  
  AWS_REGION: eu-west-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: cloudsummit           # set this to your Amazon ECR repository name
  ECS_SERVICE: cloudsummit-ecs-service deployment                 # set this to your Amazon ECS service name
  ECS_CLUSTER: cloud-summit-fg                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs/summit-app.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: summit-app           # set this to the name of the container in the containerDefinitions section of your task definition
  EKS_CLUSTER_NAME: cloudsummit
  
  REGISTRY_NAME: acrnephosdev
  CLUSTER_NAME: nephos-dev-cluster
  CLUSTER_RESOURCE_GROUP: rgNephosContainers
  NAMESPACE: default
  APP_NAME: summit-app

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Build the Docker image
    - name: Build Docker image
      run: |-
        docker build -t new-image .

    #####################
    #####  AWS ECR  #####
    #####################

    # Push the Docker image to Amazon Elastic Container Registry
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |-
        docker tag "new-image" $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

    #####################
    #####  GCP GCR  #####
    #####################

    # Push the Docker image to Google Container Registry

    # Authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
        token_format: 'access_token'

    # Login docker to Google Container Registry
    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://gcr.io

    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker tag "new-image" "gcr.io/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        docker push "gcr.io/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

    #####################
    #####  Azure ACR  #####
    #####################

    # Connect to Azure Container Registry (ACR)
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        # Container registry username
        username: ${{ secrets.REGISTRY_USERNAME }}
        # Container registry password
        password: ${{ secrets.REGISTRY_PASSWORD }}
        # Container registry server url
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io

    # Push the Docker image to Azure Container Registry
    - name: Push to Azure ACR
      run: |-
        docker tag "new-image" "$REGISTRY_NAME.azurecr.io/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        docker push "$REGISTRY_NAME.azurecr.io/$REPOSITORY/$IMAGE:$GITHUB_SHA"

  deploy-to-gke:
    name: Deploy to Google Kubernetes Engine
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
        token_format: 'access_token'
    
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
    
    # Set up kustomize
    - name: Set up Kustomize
      working-directory: ./k8s
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      working-directory: ./k8s
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image gcr.io/innate-bucksaw-284213/summit-app:1.0=gcr.io/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

  deploy-to-aks:
    name: Deploy to Azure Kubernetes Service
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

      # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v1
      with:
        # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
        namespace: ${{ env.NAMESPACE }}
        # Path to the manifest files which will be used for deployment.
        manifests: |
          k8s/debug-demo-azure.yaml
        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/cloud-summit/${{ env.APP_NAME }}:${{ github.sha }}

  deploy-to-ecs:
    name: Deploy to Elastic Container Service
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  deploy-to-eks:
    name: Deploy to Elastic Kubernetes Service
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Set up kustomize
    - name: Set up Kustomize
      working-directory: ./k8s
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
    
    # Deploy the Docker image to the EKS cluster
    - name: Deploy
      working-directory: ./k8s
      run: |-
        # replacing the image name in the k8s template
        ./kustomize edit set image 996886234804.dkr.ecr.eu-west-2.amazonaws.com/cloud-summit:1.0=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

    